{"ast":null,"code":"import _regeneratorRuntime from \"/Users/charlesbuckley/solidity/defi-staking-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/charlesbuckley/solidity/defi-staking-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/charlesbuckley/solidity/defi-staking-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/charlesbuckley/solidity/defi-staking-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/charlesbuckley/solidity/defi-staking-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"/Users/charlesbuckley/solidity/defi-staking-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/charlesbuckley/solidity/defi-staking-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/charlesbuckley/solidity/defi-staking-app/src/components/App.js\";\n// to run: npm run start\nimport React, { Component } from 'react';\nimport Navabr from './Navbar';\nimport './App.css';\nimport Web3 from 'web3';\nimport Tether from '../truffle_abis/Tether.json'; // import Reward from '../truffle_abis/Reward.json';\n// import DecentralBank from '../truffle_abis/DecentralBank.json';\n\nvar App = /*#__PURE__*/function (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"UNSAFE_componentWillMount\",\n    value: function () {\n      var _UNSAFE_componentWillMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function UNSAFE_componentWillMount() {\n        return _UNSAFE_componentWillMount.apply(this, arguments);\n      }\n\n      return UNSAFE_componentWillMount;\n    }() // load in web3 and connect metamask when the app loads \n\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!window.ethererum) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                // if the browser window detects Ethereum\n                window.web3 = new Web3(window.ethererum); // emable new instance\n\n                _context2.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                _context2.next = 13;\n                break;\n\n              case 6:\n                if (!window.web3) {\n                  _context2.next = 12;\n                  break;\n                }\n\n                // or if we detect web3 in the browser\n                window.web3 = new Web3(window.web3.currentProvider); // enable current provider \n\n                _context2.next = 10;\n                return window.web3.currentProvider.enable();\n\n              case 10:\n                _context2.next = 13;\n                break;\n\n              case 12:\n                window.alert('No ethereum browser detected. Metamask ');\n\n              case 13:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }() // load in blockchain data \n\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var web3, account, networkID, tetherData, tether, tetherBalance;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return window.web3;\n\n              case 2:\n                web3 = _context3.sent;\n                _context3.next = 5;\n                return web3.eth.getAccounts();\n\n              case 5:\n                account = _context3.sent;\n                // get the account from our blockchain data \n                this.setState({\n                  account: account[0]\n                });\n                console.log(account); // 0x6021e2c50B7Ff151EDb143e60DDf52358a33689B\n                // set up network ID that we can connect to Tether contract\n\n                _context3.next = 10;\n                return web3.eth.net.getId();\n\n              case 10:\n                networkID = _context3.sent;\n                console.log(networkID); // 5777\n                // load Tether Contract\n\n                tetherData = Tether.networks[networkID];\n\n                if (!tetherData) {\n                  _context3.next = 23;\n                  break;\n                }\n\n                tether = new web3.eth.Contract(Tether.abi, tetherData.address); // ABI + Address \n\n                this.setState({\n                  tether: tether\n                }); // load Tether balance\n\n                _context3.next = 18;\n                return tether.methods.balanceOf(this.state.account).call();\n\n              case 18:\n                tetherBalance = _context3.sent;\n                this.setState({\n                  tetherBalance: tetherBalance.toString()\n                }); // set to the state of tether.balance{}\n\n                console.log({\n                  balance: tetherBalance\n                });\n                _context3.next = 24;\n                break;\n\n              case 23:\n                // if we dont load tether data\n                alert('Error! Tether contract data not available. Consider changing to the Ganache network');\n\n              case 24:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      account: 'test',\n      tether: {},\n      reward: {},\n      decentralBank: {},\n      tetherBalance: '0',\n      rewardBalance: '0',\n      stakingBalance: '0',\n      loading: true\n    };\n    return _this;\n  } // our React code \n\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Navabr, {\n        account: this.state.account,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 17\n        }\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/charlesbuckley/solidity/defi-staking-app/src/components/App.js"],"names":["React","Component","Navabr","Web3","Tether","App","loadWeb3","loadBlockchainData","window","ethererum","web3","ethereum","enable","currentProvider","alert","eth","getAccounts","account","setState","console","log","net","getId","networkID","tetherData","networks","tether","Contract","abi","address","methods","balanceOf","state","call","tetherBalance","toString","balance","props","reward","decentralBank","rewardBalance","stakingBalance","loading"],"mappings":"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","sourcesContent":["// to run: npm run start\n\nimport React, {Component} from 'react';\nimport Navabr from './Navbar';\nimport './App.css';\nimport Web3 from 'web3';\nimport Tether from '../truffle_abis/Tether.json';\n// import Reward from '../truffle_abis/Reward.json';\n// import DecentralBank from '../truffle_abis/DecentralBank.json';\n\nclass App extends Component {\n\n    async UNSAFE_componentWillMount() { // runs when app mounts in browser\n        await this.loadWeb3();  // run the loadWeb3 function + connect to metamask\n\n        await this.loadBlockchainData(); // load blockchain data \n    }\n\n    // load in web3 and connect metamask when the app loads \n    async loadWeb3() { \n        if(window.ethererum) { // if the browser window detects Ethereum\n            window.web3 = new Web3(window.ethererum)  // emable new instance\n            await window.ethereum.enable();  // wait for it to enable\n        } else if (window.web3) { // or if we detect web3 in the browser\n            window.web3 = new Web3(window.web3.currentProvider) // enable current provider \n            await window.web3.currentProvider.enable();  // wait for it to enable\n        } else {\n            window.alert('No ethereum browser detected. Metamask ');\n        }\n    }\n\n    // load in blockchain data \n    async loadBlockchainData() {\n        const web3 = await window.web3;\n        const account = await web3.eth.getAccounts(); // get the account from our blockchain data \n\n        this.setState({ account: account[0] });\n        console.log(account); // 0x6021e2c50B7Ff151EDb143e60DDf52358a33689B\n\n        // set up network ID that we can connect to Tether contract\n        const networkID = await web3.eth.net.getId();\n        console.log(networkID) // 5777\n\n        // load Tether Contract\n        const tetherData = Tether.networks[networkID];\n        if (tetherData) {\n            const tether = new web3.eth.Contract(Tether.abi, tetherData.address)  // ABI + Address \n            this.setState({ tether });\n            // load Tether balance\n            let tetherBalance = await tether.methods.balanceOf(this.state.account).call();\n            this.setState({ tetherBalance: tetherBalance.toString() });  // set to the state of tether.balance{}\n            console.log({balance: tetherBalance})\n        } else { // if we dont load tether data\n            alert('Error! Tether contract data not available. Consider changing to the Ganache network')\n        } \n        \n       \n\n    }\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            account: 'test',\n            tether: {},\n            reward: {},\n            decentralBank: {},\n            tetherBalance: '0',\n            rewardBalance: '0',\n            stakingBalance: '0',\n            loading: true,\n        }\n    }\n\n    // our React code \n    render () {\n        return (\n            <div>\n                <Navabr account={this.state.account} />\n            </div>\n        )\n    }\n}\n\n\nexport default App"]},"metadata":{},"sourceType":"module"}