{"ast":null,"code":"import _classCallCheck from \"/Users/charlesbuckley/solidity/defi-staking-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/charlesbuckley/solidity/defi-staking-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/charlesbuckley/solidity/defi-staking-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/charlesbuckley/solidity/defi-staking-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/charlesbuckley/solidity/defi-staking-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/charlesbuckley/solidity/defi-staking-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/charlesbuckley/solidity/defi-staking-app/src/components/Airdrop.js\";\nimport React, { Component } from 'react';\n\nvar Airdrop = /*#__PURE__*/function (_Component) {\n  _inherits(Airdrop, _Component);\n\n  // Airdrop to have timer that counts down\n  // initialize countdown after our customer has staked >= 50 tokens\n  function Airdrop(props) {\n    var _this;\n\n    _classCallCheck(this, Airdrop);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Airdrop).call(this, props));\n    _this.state = {\n      time: {},\n      seconds: 20\n    };\n    _this.timer = 0;\n    _this.stateTime = _this.stateTime.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.countDown = _this.countDown.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Airdrop, [{\n    key: \"countDown\",\n    value: function countDown() {\n      // count down 1s at a time\n      var seconds = this.state.seconds - 1;\n      this.setState({\n        time: this.secondsToTime(seconds),\n        seconds: seconds\n      }); // stop counting when we hit 0\n\n      if (seconds == 0) {\n        clearInterval(this.timer);\n      }\n    }\n  }, {\n    key: \"stateTime\",\n    value: function stateTime() {\n      if (this.timer == 0) {\n        this.timer = setInterval(this.countDown, 1000);\n      }\n    }\n  }, {\n    key: \"secondsToTime\",\n    value: function secondsToTime(secs) {\n      var hours, minutes, seconds;\n      hours = Math.floor(secs / (60 * 60));\n      var devisor_for_minutes = secs % (60 * 60);\n      minutes = Math.floor(devisor_for_minutes / 60);\n      var devisor_for_seconds = devisor_for_minutes % 60;\n      seconds = Math.ceil(devisor_for_seconds);\n      var obj = {\n        'h': hours,\n        'm': minutes,\n        's': seconds\n      };\n      return obj;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var remainingTime = this.secondsToTime(this.state.seconds);\n      this.setState({\n        time: remainingTime\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          color: 'black'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }\n      }, this.state.time.m, \":\", this.state.time.s);\n    }\n  }]);\n\n  return Airdrop;\n}(Component);\n\nexport default Airdrop;","map":{"version":3,"sources":["/Users/charlesbuckley/solidity/defi-staking-app/src/components/Airdrop.js"],"names":["React","Component","Airdrop","props","state","time","seconds","timer","stateTime","bind","countDown","setState","secondsToTime","clearInterval","setInterval","secs","hours","minutes","Math","floor","devisor_for_minutes","devisor_for_seconds","ceil","obj","remainingTime","color","m","s"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;;IAEMC,O;;;AACF;AACA;AAEA,mBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,iFAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACTC,MAAAA,IAAI,EAAE,EADG;AAETC,MAAAA,OAAO,EAAE;AAFA,KAAb;AAIA,UAAKC,KAAL,GAAa,CAAb;AACA,UAAKC,SAAL,GAAiB,MAAKA,SAAL,CAAeC,IAAf,uDAAjB;AACA,UAAKC,SAAL,GAAiB,MAAKA,SAAL,CAAeD,IAAf,uDAAjB;AARe;AASlB;;;;gCAEW;AACR;AACA,UAAIH,OAAO,GAAG,KAAKF,KAAL,CAAWE,OAAX,GAAqB,CAAnC;AACA,WAAKK,QAAL,CAAc;AACVN,QAAAA,IAAI,EAAE,KAAKO,aAAL,CAAmBN,OAAnB,CADI;AAEVA,QAAAA,OAAO,EAAEA;AAFC,OAAd,EAHQ,CAQR;;AACA,UAAIA,OAAO,IAAI,CAAf,EAAkB;AACdO,QAAAA,aAAa,CAAC,KAAKN,KAAN,CAAb;AACH;AACJ;;;gCAEW;AACR,UAAI,KAAKA,KAAL,IAAc,CAAlB,EAAqB;AACjB,aAAKA,KAAL,GAAaO,WAAW,CAAC,KAAKJ,SAAN,EAAiB,IAAjB,CAAxB;AACH;AACJ;;;kCAEaK,I,EAAM;AAChB,UAAIC,KAAJ,EAAWC,OAAX,EAAoBX,OAApB;AACAU,MAAAA,KAAK,GAAGE,IAAI,CAACC,KAAL,CAAWJ,IAAI,IAAI,KAAK,EAAT,CAAf,CAAR;AAEA,UAAIK,mBAAmB,GAAGL,IAAI,IAAI,KAAK,EAAT,CAA9B;AACAE,MAAAA,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWC,mBAAmB,GAAG,EAAjC,CAAV;AAEA,UAAIC,mBAAmB,GAAGD,mBAAmB,GAAG,EAAhD;AACAd,MAAAA,OAAO,GAAGY,IAAI,CAACI,IAAL,CAAUD,mBAAV,CAAV;AAEA,UAAIE,GAAG,GAAG;AACN,aAAMP,KADA;AAEN,aAAMC,OAFA;AAGN,aAAKX;AAHC,OAAV;AAMA,aAAOiB,GAAP;AACH;;;wCAEmB;AAChB,UAAIC,aAAa,GAAG,KAAKZ,aAAL,CAAmB,KAAKR,KAAL,CAAWE,OAA9B,CAApB;AACA,WAAKK,QAAL,CAAc;AAACN,QAAAA,IAAI,EAAEmB;AAAP,OAAd;AAEH;;;6BAGS;AACN,0BACI;AAAK,QAAA,KAAK,EAAE;AAACC,UAAAA,KAAK,EAAE;AAAR,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKrB,KAAL,CAAWC,IAAX,CAAgBqB,CADrB,OACyB,KAAKtB,KAAL,CAAWC,IAAX,CAAgBsB,CADzC,CADJ;AAKH;;;;EAnEiB1B,S;;AAuEtB,eAAeC,OAAf","sourcesContent":["import React, {Component} from 'react';\n\nclass Airdrop extends Component {\n    // Airdrop to have timer that counts down\n    // initialize countdown after our customer has staked >= 50 tokens\n      \n    constructor(props) {\n        super(props) \n        this.state = {\n            time: {},\n            seconds: 20,\n        };\n        this.timer = 0;\n        this.stateTime = this.stateTime.bind(this);\n        this.countDown = this.countDown.bind(this);\n    }\n\n    countDown() {\n        // count down 1s at a time\n        let seconds = this.state.seconds - 1;\n        this.setState({\n            time: this.secondsToTime(seconds),\n            seconds: seconds\n        })\n\n        // stop counting when we hit 0\n        if (seconds == 0) {\n            clearInterval(this.timer)\n        }\n    }\n\n    stateTime() {\n        if (this.timer == 0) {\n            this.timer = setInterval(this.countDown, 1000)\n        }\n    }\n\n    secondsToTime(secs) {\n        let hours, minutes, seconds;\n        hours = Math.floor(secs / (60 * 60))\n\n        let devisor_for_minutes = secs % (60 * 60)\n        minutes = Math.floor(devisor_for_minutes / 60)\n\n        let devisor_for_seconds = devisor_for_minutes % 60\n        seconds = Math.ceil(devisor_for_seconds)\n\n        let obj = {\n            'h' : hours,\n            'm' : minutes,\n            's': seconds\n        }\n\n        return obj\n    }\n\n    componentDidMount() {\n        let remainingTime = this.secondsToTime(this.state.seconds)\n        this.setState({time: remainingTime})\n        \n    }\n\n\n    render () {\n        return (\n            <div style={{color: 'black'}}>\n                {this.state.time.m}:{this.state.time.s}\n            </div>\n        )\n    }\n}\n\n\nexport default Airdrop"]},"metadata":{},"sourceType":"module"}