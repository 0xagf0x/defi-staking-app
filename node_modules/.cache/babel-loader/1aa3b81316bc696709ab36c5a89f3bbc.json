{"ast":null,"code":"import _regeneratorRuntime from \"/Users/charlesbuckley/solidity/defi-staking-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/charlesbuckley/solidity/defi-staking-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/charlesbuckley/solidity/defi-staking-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/charlesbuckley/solidity/defi-staking-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/charlesbuckley/solidity/defi-staking-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"/Users/charlesbuckley/solidity/defi-staking-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/charlesbuckley/solidity/defi-staking-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/charlesbuckley/solidity/defi-staking-app/src/components/App.js\";\n// to run: npm run start\nimport React, { Component } from 'react';\nimport Navabr from './Navbar';\nimport Main from './Main';\nimport './App.css';\nimport Web3 from 'web3';\nimport Tether from '../truffle_abis/Tether.json';\nimport Reward from '../truffle_abis/Reward.json';\nimport DecentralBank from '../truffle_abis/DecentralBank.json';\nimport ParticleSettings from './ParticleSettings';\nimport Airdrop from './Airdrop';\n\nvar App = /*#__PURE__*/function (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"UNSAFE_componentWillMount\",\n    value: function () {\n      var _UNSAFE_componentWillMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function UNSAFE_componentWillMount() {\n        return _UNSAFE_componentWillMount.apply(this, arguments);\n      }\n\n      return UNSAFE_componentWillMount;\n    }() // load in web3 and connect metamask when the app loads \n\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!window.ethererum) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                // if the browser window detects Ethereum\n                window.web3 = new Web3(window.ethererum); // emable new instance\n\n                _context2.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                _context2.next = 13;\n                break;\n\n              case 6:\n                if (!window.web3) {\n                  _context2.next = 12;\n                  break;\n                }\n\n                // or if we detect web3 in the browser\n                window.web3 = new Web3(window.web3.currentProvider); // enable current provider \n\n                _context2.next = 10;\n                return window.web3.currentProvider.enable();\n\n              case 10:\n                _context2.next = 13;\n                break;\n\n              case 12:\n                window.alert('No ethereum browser detected. Metamask ');\n\n              case 13:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }() // load in blockchain data \n\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var web3, account, networkID, tetherData, tether, tetherBalance, rewardData, reward, rewardBalance, decentralBankData, decentralBank, stakingBalance;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return window.web3;\n\n              case 2:\n                web3 = _context3.sent;\n                _context3.next = 5;\n                return web3.eth.getAccounts();\n\n              case 5:\n                account = _context3.sent;\n                // get the account from our blockchain data \n                this.setState({\n                  account: account[0]\n                });\n                console.log(account); // 0x6021e2c50B7Ff151EDb143e60DDf52358a33689B\n                // set up network ID that we can connect to Tether contract\n\n                _context3.next = 10;\n                return web3.eth.net.getId();\n\n              case 10:\n                networkID = _context3.sent;\n                console.log(networkID); // 5777\n                // load Tether Contract\n\n                tetherData = Tether.networks[networkID];\n\n                if (!tetherData) {\n                  _context3.next = 23;\n                  break;\n                }\n\n                tether = new web3.eth.Contract(Tether.abi, tetherData.address); // ABI + Address \n\n                this.setState({\n                  tether: tether\n                }); // load Tether balance\n\n                _context3.next = 18;\n                return tether.methods.balanceOf(this.state.account).call();\n\n              case 18:\n                tetherBalance = _context3.sent;\n                this.setState({\n                  tetherBalance: tetherBalance.toString()\n                }); // set to the state of tether.balance{}\n\n                console.log({\n                  balance: tetherBalance\n                }, 'tether balance');\n                _context3.next = 24;\n                break;\n\n              case 23:\n                // if we dont load tether data\n                alert('Error! Tether contract data not available. Consider changing to the Ganache network.');\n\n              case 24:\n                // load Reward token Contract\n                rewardData = Reward.networks[networkID];\n\n                if (!rewardData) {\n                  _context3.next = 35;\n                  break;\n                }\n\n                reward = new web3.eth.Contract(Reward.abi, rewardData.address); // ABI + Address \n\n                this.setState({\n                  reward: reward\n                }); // load Tether balance\n\n                _context3.next = 30;\n                return reward.methods.balanceOf(this.state.account).call();\n\n              case 30:\n                rewardBalance = _context3.sent;\n                this.setState({\n                  rewardBalance: rewardBalance.toString()\n                });\n                console.log({\n                  balance: rewardBalance\n                });\n                _context3.next = 36;\n                break;\n\n              case 35:\n                alert('Error! Reward contract data not available. Consider changing to the Ganache network.');\n\n              case 36:\n                // load Decentral Bank Contract\n                decentralBankData = DecentralBank.networks[networkID];\n\n                if (!decentralBankData) {\n                  _context3.next = 47;\n                  break;\n                }\n\n                decentralBank = new web3.eth.Contract(DecentralBank.abi, decentralBankData.address);\n                this.setState({\n                  decentralBank: decentralBank\n                });\n                _context3.next = 42;\n                return decentralBank.methods.stakingBalance(this.state.account).call();\n\n              case 42:\n                stakingBalance = _context3.sent;\n                this.setState({\n                  stakingBalance: stakingBalance.toString()\n                });\n                console.log({\n                  balance: stakingBalance\n                });\n                _context3.next = 48;\n                break;\n\n              case 47:\n                alert('Error! Decentral Bank contract data not available. Consider changing to the Ganache network.');\n\n              case 48:\n                this.setState({\n                  loading: false\n                });\n\n              case 49:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }() // two functions - one that stakes and one that Unstakes\n    // use the DecentralBank contract - deposit tokens and unstaking \n    // ALL of this is for the staking: \n    // depositTones transferFrom ....\n    // funciton approve transaction hash \n    // Staking Function ?? >> decentralBank.depositTokens(send transactionHash => )\n    // staking function \n\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.stakeTokens = function (amount) {\n      var ethAmount = Web3.utils.fromWei(amount, 'ether');\n\n      _this.setState({\n        loading: true\n      });\n\n      _this.state.tether.methods.approve(_this.state.decentralBank._address, amount).send({\n        from: _this.state.account\n      }).on('transactionHash', function (hash) {\n        // grab decentralBank and then grab depositTokens()....send from the state of Account....\n        _this.state.decentralBank.methods.depositTokens(amount).send({\n          from: _this.state.account\n        }).on('transactionHash', function (hash) {\n          _this.setState({\n            loading: false\n          });\n        });\n      });\n\n      if (ethAmount >= 50) {\n        _this.props.airdrop();\n      }\n    };\n\n    _this.unstakeTokens = function () {\n      _this.setState({\n        loading: true\n      });\n\n      _this.state.decentralBank.methods.unstakeTokens().send({\n        from: _this.state.account\n      }).on('transactionHash', function (hash) {\n        _this.setState({\n          loading: false\n        });\n      });\n    };\n\n    _this.state = {\n      account: '0x0',\n      tether: {},\n      reward: {},\n      decentralBank: {},\n      tetherBalance: '0',\n      rewardBalance: '0',\n      stakingBalance: '0',\n      loading: true\n    };\n    return _this;\n  } // our React code \n\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var content;\n      {\n        this.state.loading ? content = /*#__PURE__*/React.createElement(\"p\", {\n          id: \"loader\",\n          className: \"text-center\",\n          style: {\n            margin: '30px'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 23\n          }\n        }, \"Loading...\") : content = /*#__PURE__*/React.createElement(Main, {\n          tetherBalance: this.state.tetherBalance,\n          rewardBalance: this.state.rewardBalance,\n          stakingBalance: this.state.stakingBalance,\n          stakeTokens: this.stakeTokens,\n          unstakeTokens: this.unstakeTokens,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 24\n          }\n        });\n      }\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"App\",\n        style: {\n          position: 'relative'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          position: 'absolute'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(ParticleSettings, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 21\n        }\n      })), /*#__PURE__*/React.createElement(Navabr, {\n        account: this.state.account,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"container-fluid mt-5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"main\", {\n        role: \"main\",\n        className: \"col-lg-12 ml-auto mr-auto\",\n        style: {\n          maxWidth: '600px',\n          minHeight: '100vm'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 29\n        }\n      }, content)))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/charlesbuckley/solidity/defi-staking-app/src/components/App.js"],"names":["React","Component","Navabr","Main","Web3","Tether","Reward","DecentralBank","ParticleSettings","Airdrop","App","loadWeb3","loadBlockchainData","window","ethererum","web3","ethereum","enable","currentProvider","alert","eth","getAccounts","account","setState","console","log","net","getId","networkID","tetherData","networks","tether","Contract","abi","address","methods","balanceOf","state","call","tetherBalance","toString","balance","rewardData","reward","rewardBalance","decentralBankData","decentralBank","stakingBalance","loading","props","stakeTokens","amount","ethAmount","utils","fromWei","approve","_address","send","from","on","hash","depositTokens","airdrop","unstakeTokens","content","margin","position","maxWidth","minHeight"],"mappings":"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","sourcesContent":["// to run: npm run start\n\nimport React, {Component} from 'react';\nimport Navabr from './Navbar';\nimport Main from './Main';\nimport './App.css';\nimport Web3 from 'web3';\nimport Tether from '../truffle_abis/Tether.json';\nimport Reward from '../truffle_abis/Reward.json';\nimport DecentralBank from '../truffle_abis/DecentralBank.json';\nimport ParticleSettings from './ParticleSettings';\nimport Airdrop from './Airdrop';\n\nclass App extends Component {\n\n    async UNSAFE_componentWillMount() { // runs when app mounts in browser\n        await this.loadWeb3();  // run the loadWeb3 function + connect to metamask\n        await this.loadBlockchainData(); // load blockchain data \n    }\n\n    // load in web3 and connect metamask when the app loads \n    async loadWeb3() { \n        if(window.ethererum) { // if the browser window detects Ethereum\n            window.web3 = new Web3(window.ethererum)  // emable new instance\n            await window.ethereum.enable();  // wait for it to enable\n        } else if (window.web3) { // or if we detect web3 in the browser\n            window.web3 = new Web3(window.web3.currentProvider) // enable current provider \n            await window.web3.currentProvider.enable();  // wait for it to enable\n        } else {\n            window.alert('No ethereum browser detected. Metamask ');\n        }\n    }\n\n    // load in blockchain data \n    async loadBlockchainData() {\n        const web3 = await window.web3;\n        const account = await web3.eth.getAccounts(); // get the account from our blockchain data \n\n        this.setState({ account: account[0] });\n        console.log(account); // 0x6021e2c50B7Ff151EDb143e60DDf52358a33689B\n\n        // set up network ID that we can connect to Tether contract\n        const networkID = await web3.eth.net.getId();\n        console.log(networkID) // 5777\n\n        // load Tether Contract\n        const tetherData = Tether.networks[networkID];\n        if (tetherData) {\n            const tether = new web3.eth.Contract(Tether.abi, tetherData.address)  // ABI + Address \n            this.setState({ tether });\n            // load Tether balance\n            let tetherBalance = await tether.methods.balanceOf(this.state.account).call();\n            this.setState({ tetherBalance: tetherBalance.toString() });  // set to the state of tether.balance{}\n            console.log({balance: tetherBalance}, 'tether balance')\n        } else { // if we dont load tether data\n            alert('Error! Tether contract data not available. Consider changing to the Ganache network.')\n        }\n        \n        \n        // load Reward token Contract\n        const rewardData = Reward.networks[networkID];\n        if (rewardData) {\n            const reward = new web3.eth.Contract(Reward.abi, rewardData.address)  // ABI + Address \n            this.setState({ reward });\n            // load Tether balance\n            let rewardBalance = await reward.methods.balanceOf(this.state.account).call();\n            this.setState({ rewardBalance: rewardBalance.toString() }); \n            console.log({balance: rewardBalance})\n        } else { \n            alert('Error! Reward contract data not available. Consider changing to the Ganache network.')\n        }\n\n        // load Decentral Bank Contract\n        const decentralBankData = DecentralBank.networks[networkID];\n        if (decentralBankData) {\n            const decentralBank = new web3.eth.Contract(DecentralBank.abi, decentralBankData.address)  \n            this.setState({ decentralBank });\n            let stakingBalance = await decentralBank.methods.stakingBalance(this.state.account).call();\n            this.setState({ stakingBalance: stakingBalance.toString() });  \n            console.log({balance: stakingBalance})\n        } else { \n            alert('Error! Decentral Bank contract data not available. Consider changing to the Ganache network.')\n        }\n\n        this.setState({loading: false });\n    }\n\n    // two functions - one that stakes and one that Unstakes\n    // use the DecentralBank contract - deposit tokens and unstaking \n    // ALL of this is for the staking: \n    // depositTones transferFrom ....\n    // funciton approve transaction hash \n    // Staking Function ?? >> decentralBank.depositTokens(send transactionHash => )\n\n    // staking function \n    stakeTokens = (amount) => {\n        let ethAmount = Web3.utils.fromWei(amount, 'ether');\n        this.setState({loading: true});\n        this.state.tether.methods.approve(this.state.decentralBank._address, amount).send({from: this.state.account}).on('transactionHash', (hash) => {\n            // grab decentralBank and then grab depositTokens()....send from the state of Account....\n            this.state.decentralBank.methods.depositTokens(amount).send({from: this.state.account}).on('transactionHash', (hash) => {\n                this.setState({loading: false});\n            })\n        })\n\n        if (ethAmount >= 50) {\n            this.props.airdrop();\n        }\n    }\n\n    unstakeTokens = () => {\n        this.setState({loading: true })\n        this.state.decentralBank.methods.unstakeTokens().send({from: this.state.account}).on('transactionHash', (hash) => {\n          this.setState({loading:false})\n        }) \n    }\n\n    \n    constructor(props) {\n        super(props)\n        this.state = {\n            account: '0x0',\n            tether: {},\n            reward: {},\n            decentralBank: {},\n            tetherBalance: '0',\n            rewardBalance: '0',\n            stakingBalance: '0',\n            loading: true,\n        }\n    }\n\n    // our React code \n    render () {\n        let content;\n        {this.state.loading ? \n            content = <p id=\"loader\" className=\"text-center\" style={{margin: '30px'}}>Loading...</p> \n            :content = <Main \n                tetherBalance = {this.state.tetherBalance}\n                rewardBalance = {this.state.rewardBalance}\n                stakingBalance = {this.state.stakingBalance}\n                stakeTokens = {this.stakeTokens}\n                unstakeTokens={this.unstakeTokens}\n            />}\n            \n\n            return (\n            <div className=\"App\" style={{position: 'relative'}}>\n                <div style={{position: 'absolute'}}>\n                    <ParticleSettings />\n                </div>\n                <Navabr account={this.state.account} />\n                <div className=\"container-fluid mt-5\">\n                    <div className=\"row\">\n                        <main role=\"main\" className=\"col-lg-12 ml-auto mr-auto\" style={{maxWidth: '600px', minHeight: '100vm'}}>\n                            <div>\n                               {content}\n                            </div>\n                        </main>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\n\nexport default App"]},"metadata":{},"sourceType":"module"}